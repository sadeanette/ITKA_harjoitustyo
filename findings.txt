## Harjoitustyöraportti

Palauttajat (max 3): Säde Latikka
Pisteitä yhteensä: 9.

## Ongelma 1
Tyyppi:   Polkuinjektio
Sijainti: delete_file()
Kuvaus:

Aliohjelmassa delete_file ei tarkasteta käyttäjän syöttämää polkua
millään tavalla. Tämä mahdollistaa sen, että käyttäjä tuhoaa minkä
tahansa tiedoston, esimerkiksi toisen käyttäjän tiedoston tai vaikkapa
jonkin järjestelmätiedoston.

### Esimerkkihyökkäys: 

1) Kirjaudu sisään käyttäjänä "sam".
2) Tee pyyntö /delete_file?file=../sue/tiedosto.txt
3) Tulos: Suen tiedosto tuhotaan

### Korjaus:

Commit: Problem 1 delete_file path injection

Korjasin tämän os.path.abspath - metodilla, joka normalisoi käyttäjän syötteenä
antaman polun absoluuttiseksi. Polun sisältö on kokonaan käyttäjän syöte ja
"/app/", joka tulee kuitenkin poistaa, jotta lopuksi polku osoittaa oikeaan tiedostoon.

Korjaus toimii, koska normalisoitu polku poistaa esimerkiksi "../" ja muut
symboliset merkinnät. Käyttäjä ei siis pääse hyppimään tiedostoissa taaksepäin.

Korjaus estää uuden polkuinjektion syntymisen, sillä uutta reittiä luotaessa
se osoittaa aina käyttäjän omaan hakemistoon. Polkuinjektiota yrittäessä
käyttäjälle näkyy virheviesti ja poistoa ei tehdä. Käyttäjä voi siis poistaa
vain omia tiedostojaan.

### Pisteet(3pt)

1pt vian löytämisestä
1pt vian korjaamisesta
1pt vikatyypin eliminoimisesta

## Ongelma 2
Tyyppi:   Shell-injektio
Sijainti: login()
Kuvaus:

Käyttäjä voi kirjautua toiselle käyttäjälle pelkästään
käyttäjänimellä antamatta salasanaa.

### Esimerkkihyökkäys: 

1) Kirjoita komentoriville:
   "curl http://localhost:5000/login?user=sue\"
   Tai selaimeen:
   "http://localhost:5000/login?user=sue\"
2) Tulos: Pääset onnistuneesti kirjautumaan suen tilille

### Korjaus:

Commit: Problem 2 fixed logging shell injection

Korjasin tämän muokkaamalla login() - funktiota siten, että kirjautumista
koskeva ehtolause testaa lisäksi onko syötetty käyttäjänimi käyttäjien
listassa. Korjaus on tehty kuitenkin niin, että mahdollisesti eri syötteitä
kokeileva käyttäjä ei saa selville, että tietty käyttäjänimi on kyseisessä
palvelussa.

Korjaus toimii, koska ehtolause tarkistaa käyttäjänimen olemassaolon.
Ehtolauseessa ei siis tule tilannetta, jossa users.get(username)
palauttaa arvon None, joka olemattoman salasanan kanssa olisi saman
arvoinen.

Korjaus estää uuden kirjautumisen shell injektion syntymisen, sillä
nyt ehtolause ei saa "true"-arvoa kahdesta "None"-arvosta. Samalla
kirjautumissivulla ei myöskään anneta tietoa muiden käyttäjänimien
olemisesta palvelimella, vaan eri syötteillä ilmoitetaan aina
"Login failed!"

### Pisteet(3pt)

1pt vian löytämisestä
1pt vian korjaamisesta
1pt vikatyypin eliminoimisesta

## Ongelma 3
Tyyppi:   Shell-injektio
Sijainti: checkerLoop(queue)
Kuvaus:

Käyttäjä voi ladata palveluun päätteettömän tiedoston ja koska
tiedoston tiedot tulostetaan komentorivissä, hän voi tiedoston nimen
avulla antaa komentoja shelliin ja esimerkiksi poistaa
kaikki tiedostot tai lähettää omaan palveluunsa tietoja
kyseisestä palvelusta, sen tiedostoista ja käyttäjistä.

### Esimerkkihyökkäys: 

1) Kirjaudu käyttäjälle sam.
2) Lataa päätteetön tiedosto, jonka nimi on testi;ls
3) Tulos: Saat tulostettua komentoriviin palvelun tiedostot
   ja käytännössä voit antaa komentoriville mitä komentoja vain
   muokkaamalla tekstiä "ls"

### Korjaus:

Commit: Problem 3 fixed filename shell injection

Korjasin tämän muokkaamalla subprosess.run -metodia siten, että
yhden kokonaisen merkkijonon sijaan se ottaa vastaan listan, jossa
käyttäjän syöte on toisena alkiona. Näin siihen ei synny ylimääräisiä
alkioita. Lisäksi kyseistä tulostetta ei tulosteta komentorivillä
print() -metodissa.

Korjaus toimii, koska käyttäjän syötettä ei enää tulkita
komentorivin kautta, vaan se tulkitaan vain file-komennon
argumenttina. Komentotulkkiin ei siis voi enää injektoida mitään.

Korjaus estää uuden tiedoston kautta tehtävän shell injektion,
sillä kyseistä toiminpidettä ei suoriteta enää komentotulkin kautta
ja toiminto edelleen pysyy kuitenkin samanlaisena. Lisäksi tiedoston
pääte tarkistetaan vielä heti alussa, joten päätteettömiä tai väärällä
päätteellä olevia tiedostoja ei hyväksytä eteenpäin.

### Pisteet(3pt)

1pt vian löytämisestä
1pt vian korjaamisesta
1pt vikatyypin eliminoimisesta

## Ongelma 4

...
